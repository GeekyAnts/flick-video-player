// Mocks generated by Mockito 5.4.4 from annotations
// in example/test/widgets/flick_video_player_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i7;

import 'package:flick_video_player/src/manager/flick_manager.dart' as _i8;
import 'package:flutter/material.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:video_player/src/closed_caption_file.dart' as _i6;
import 'package:video_player/video_player.dart' as _i2;
import 'package:video_player_platform_interface/video_player_platform_interface.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeVideoPlayerValue_0 extends _i1.SmartFake
    implements _i2.VideoPlayerValue {
  _FakeVideoPlayerValue_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_1 extends _i1.SmartFake implements Duration {
  _FakeDuration_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [VideoPlayerController].
///
/// See the documentation for Mockito's code generation for more information.
class MockVideoPlayerController extends _i1.Mock
    implements _i2.VideoPlayerController {
  MockVideoPlayerController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get dataSource => (super.noSuchMethod(
        Invocation.getter(#dataSource),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#dataSource),
        ),
      ) as String);

  @override
  Map<String, String> get httpHeaders => (super.noSuchMethod(
        Invocation.getter(#httpHeaders),
        returnValue: <String, String>{},
      ) as Map<String, String>);

  @override
  _i4.DataSourceType get dataSourceType => (super.noSuchMethod(
        Invocation.getter(#dataSourceType),
        returnValue: _i4.DataSourceType.asset,
      ) as _i4.DataSourceType);

  @override
  int get textureId => (super.noSuchMethod(
        Invocation.getter(#textureId),
        returnValue: 0,
      ) as int);

  @override
  _i5.Future<Duration?> get position => (super.noSuchMethod(
        Invocation.getter(#position),
        returnValue: _i5.Future<Duration?>.value(),
      ) as _i5.Future<Duration?>);

  @override
  _i2.VideoPlayerValue get value => (super.noSuchMethod(
        Invocation.getter(#value),
        returnValue: _FakeVideoPlayerValue_0(
          this,
          Invocation.getter(#value),
        ),
      ) as _i2.VideoPlayerValue);

  @override
  set value(_i2.VideoPlayerValue? newValue) => super.noSuchMethod(
        Invocation.setter(
          #value,
          newValue,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> play() => (super.noSuchMethod(
        Invocation.method(
          #play,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> setLooping(bool? looping) => (super.noSuchMethod(
        Invocation.method(
          #setLooping,
          [looping],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> seekTo(Duration? position) => (super.noSuchMethod(
        Invocation.method(
          #seekTo,
          [position],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> setVolume(double? volume) => (super.noSuchMethod(
        Invocation.method(
          #setVolume,
          [volume],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> setPlaybackSpeed(double? speed) => (super.noSuchMethod(
        Invocation.method(
          #setPlaybackSpeed,
          [speed],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void setCaptionOffset(Duration? offset) => super.noSuchMethod(
        Invocation.method(
          #setCaptionOffset,
          [offset],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> setClosedCaptionFile(
          _i5.Future<_i6.ClosedCaptionFile>? closedCaptionFile) =>
      (super.noSuchMethod(
        Invocation.method(
          #setClosedCaptionFile,
          [closedCaptionFile],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FlickManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlickManager extends _i1.Mock implements _i8.FlickManager {
  MockFlickManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onVideoEnd(Function? _onVideoEnd) => super.noSuchMethod(
        Invocation.setter(
          #onVideoEnd,
          _onVideoEnd,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.GetPlayerControlsTimeout get getPlayerControlsTimeout =>
      (super.noSuchMethod(
        Invocation.getter(#getPlayerControlsTimeout),
        returnValue: ({
          bool? errorInVideo,
          bool? isPlaying,
          bool? isVideoEnded,
          bool? isVideoInitialized,
        }) =>
            _FakeDuration_1(
          this,
          Invocation.getter(#getPlayerControlsTimeout),
        ),
      ) as _i8.GetPlayerControlsTimeout);

  @override
  set getPlayerControlsTimeout(
          _i8.GetPlayerControlsTimeout? _getPlayerControlsTimeout) =>
      super.noSuchMethod(
        Invocation.setter(
          #getPlayerControlsTimeout,
          _getPlayerControlsTimeout,
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic registerContext(_i9.BuildContext? context) =>
      super.noSuchMethod(Invocation.method(
        #registerContext,
        [context],
      ));

  @override
  dynamic handleChangeVideo(
    _i2.VideoPlayerController? videoPlayerController, {
    Duration? videoChangeDuration,
    _i8.TimerCancelCallback? timerCancelCallback,
  }) =>
      super.noSuchMethod(Invocation.method(
        #handleChangeVideo,
        [videoPlayerController],
        {
          #videoChangeDuration: videoChangeDuration,
          #timerCancelCallback: timerCancelCallback,
        },
      ));
}

/// A class which mocks [FlickVideoManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlickVideoManager extends _i1.Mock implements _i8.FlickVideoManager {
  MockFlickVideoManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get autoPlay => (super.noSuchMethod(
        Invocation.getter(#autoPlay),
        returnValue: false,
      ) as bool);

  @override
  bool get autoInitialize => (super.noSuchMethod(
        Invocation.getter(#autoInitialize),
        returnValue: false,
      ) as bool);

  @override
  bool get isVideoEnded => (super.noSuchMethod(
        Invocation.getter(#isVideoEnded),
        returnValue: false,
      ) as bool);

  @override
  bool get isBuffering => (super.noSuchMethod(
        Invocation.getter(#isBuffering),
        returnValue: false,
      ) as bool);

  @override
  bool get errorInVideo => (super.noSuchMethod(
        Invocation.getter(#errorInVideo),
        returnValue: false,
      ) as bool);

  @override
  bool get isVideoInitialized => (super.noSuchMethod(
        Invocation.getter(#isVideoInitialized),
        returnValue: false,
      ) as bool);

  @override
  bool get isPlaying => (super.noSuchMethod(
        Invocation.getter(#isPlaying),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  dynamic cancelVideoAutoPlayTimer({bool? playNext = false}) =>
      super.noSuchMethod(Invocation.method(
        #cancelVideoAutoPlayTimer,
        [],
        {#playNext: playNext},
      ));

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FlickControlManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlickControlManager extends _i1.Mock
    implements _i8.FlickControlManager {
  MockFlickControlManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isFullscreen => (super.noSuchMethod(
        Invocation.getter(#isFullscreen),
        returnValue: false,
      ) as bool);

  @override
  bool get isMute => (super.noSuchMethod(
        Invocation.getter(#isMute),
        returnValue: false,
      ) as bool);

  @override
  bool get isSub => (super.noSuchMethod(
        Invocation.getter(#isSub),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void enterFullscreen() => super.noSuchMethod(
        Invocation.method(
          #enterFullscreen,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void exitFullscreen() => super.noSuchMethod(
        Invocation.method(
          #exitFullscreen,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void toggleFullscreen() => super.noSuchMethod(
        Invocation.method(
          #toggleFullscreen,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void togglePlay() => super.noSuchMethod(
        Invocation.method(
          #togglePlay,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void replay() => super.noSuchMethod(
        Invocation.method(
          #replay,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> play() => (super.noSuchMethod(
        Invocation.method(
          #play,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> autoResume() => (super.noSuchMethod(
        Invocation.method(
          #autoResume,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> autoPause() => (super.noSuchMethod(
        Invocation.method(
          #autoPause,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> seekTo(Duration? moment) => (super.noSuchMethod(
        Invocation.method(
          #seekTo,
          [moment],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> seekForward(Duration? videoSeekDuration) =>
      (super.noSuchMethod(
        Invocation.method(
          #seekForward,
          [videoSeekDuration],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> seekBackward(Duration? videoSeekDuration) =>
      (super.noSuchMethod(
        Invocation.method(
          #seekBackward,
          [videoSeekDuration],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> mute() => (super.noSuchMethod(
        Invocation.method(
          #mute,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> unmute() => (super.noSuchMethod(
        Invocation.method(
          #unmute,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> toggleMute() => (super.noSuchMethod(
        Invocation.method(
          #toggleMute,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> hideSubtitle() => (super.noSuchMethod(
        Invocation.method(
          #hideSubtitle,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> showSubtitle() => (super.noSuchMethod(
        Invocation.method(
          #showSubtitle,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> toggleSubtitle() => (super.noSuchMethod(
        Invocation.method(
          #toggleSubtitle,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> setVolume(
    double? volume, {
    bool? isMute = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setVolume,
          [volume],
          {#isMute: isMute},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> setPlaybackSpeed(double? speed) => (super.noSuchMethod(
        Invocation.method(
          #setPlaybackSpeed,
          [speed],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> increaseVolume(double? increaseBy) => (super.noSuchMethod(
        Invocation.method(
          #increaseVolume,
          [increaseBy],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> decreaseVolume(double? decreaseBy) => (super.noSuchMethod(
        Invocation.method(
          #decreaseVolume,
          [decreaseBy],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FlickDisplayManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlickDisplayManager extends _i1.Mock
    implements _i8.FlickDisplayManager {
  MockFlickDisplayManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set volume(double? _volume) => super.noSuchMethod(
        Invocation.setter(
          #volume,
          _volume,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get showPlayerControls => (super.noSuchMethod(
        Invocation.getter(#showPlayerControls),
        returnValue: false,
      ) as bool);

  @override
  bool get showForwardSeek => (super.noSuchMethod(
        Invocation.getter(#showForwardSeek),
        returnValue: false,
      ) as bool);

  @override
  bool get showBackwardSeek => (super.noSuchMethod(
        Invocation.getter(#showBackwardSeek),
        returnValue: false,
      ) as bool);

  @override
  bool get showVolumeLevel => (super.noSuchMethod(
        Invocation.getter(#showVolumeLevel),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  dynamic handleShowPlayerControls({bool? showWithTimeout = true}) =>
      super.noSuchMethod(Invocation.method(
        #handleShowPlayerControls,
        [],
        {#showWithTimeout: showWithTimeout},
      ));

  @override
  dynamic handleShowVolumeLevel(
          {Duration? duration = const Duration(seconds: 3)}) =>
      super.noSuchMethod(Invocation.method(
        #handleShowVolumeLevel,
        [],
        {#duration: duration},
      ));

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
